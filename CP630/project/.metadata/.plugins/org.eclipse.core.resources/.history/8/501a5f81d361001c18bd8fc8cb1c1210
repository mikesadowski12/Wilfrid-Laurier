package ec.lr;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.ejb.EJB;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;

import ec.jpa.model.Model;
import stats.ejb.ModelEJBStateless;

import weka.classifiers.Classifier;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.converters.ConverterUtils.DataSource;

@Stateless
@LocalBean
public class LRStateless implements LRStatelessLocal {
    @EJB
    private ModelEJBStateless modelEJBStateless;
    
    private String formatResult(String result) {
    	int index = result.indexOf("@data");
    	return "{ \'linear-regression\': { \'data\': " 
    			+ result.substring(index+5, result.length()) 
    			+ " }}";
    }
    
    private void parse() {
    	String inFileName = "data/2018-2019.csv";
    	String outFileName = "data/output 2018.txt";
    	
    	ArrayList<List<String>> fileContents = new ArrayList();
    	ArrayList<List<String>> res = new ArrayList();
    	
    	// https://www.journaldev.com/709/java-read-file-line-by-line
		BufferedReader reader;
		try {
			reader = new BufferedReader(new FileReader(inFileName));
			String line = reader.readLine();
			while (line != null) {
//				System.out.println(line);
				List<String> attributes = Arrays.asList(line.split(","));
				fileContents.add(attributes);
				// read next line
				line = reader.readLine();
			}
			reader.close();

			for (List<String> lineContents : fileContents) {
				List<String> newLineContents = new ArrayList();
				newLineContents.add(lineContents.get(0));
				newLineContents.add(lineContents.get(1));
				newLineContents.add(lineContents.get(2));
				newLineContents.add(lineContents.get(3));
				newLineContents.add(lineContents.get(4));
				newLineContents.add(lineContents.get(5));
				
				res.add(newLineContents);
			}
			
			  BufferedWriter outputWriter = null;
			  outputWriter = new BufferedWriter(new FileWriter(outFileName));
			  for (int i = 0; i < res.size(); i++) {
				String lineArray = res.get(i).toString();
				System.out.println(lineArray);

			    outputWriter.newLine();
			  }
			  outputWriter.flush();  
			  outputWriter.close(); 
		} catch (IOException e) {
			e.printStackTrace();
		}
    }

	@Override
	public String prediction() {
		Model model = modelEJBStateless.getModelByName("weka-lr");
    	ByteArrayInputStream bis = new ByteArrayInputStream(model.getObject());
    	ObjectInput in = null;
    	Instances predicationDataSet = null;
    	parse();

    	try {
      	  try {
			in = new ObjectInputStream(bis);
			Classifier cls = (Classifier) in.readObject();

          	predicationDataSet = DataSource.read("data/2016-2017.arff");
          	predicationDataSet.setClassIndex(predicationDataSet.numAttributes()-1);
          	Instance predicationDataInstance = predicationDataSet.lastInstance();
    		double value = cls.classifyInstance(predicationDataInstance);
    		System.out.println(value);

    	    for (int i = 0; i < predicationDataSet.numInstances(); i++) {
    		      double clsLabel = cls.classifyInstance(predicationDataSet.instance(i));
    		      predicationDataSet.instance(i).setClassValue(clsLabel);
    	    }

    	    String predictionResults = predicationDataSet.toString();    	    
			return formatResult(predictionResults);
      	  } catch (IOException e) {
      		  e.printStackTrace();
      	  } catch (ClassNotFoundException e) {
      		  e.printStackTrace();
      	  } catch (Exception e) {
      		  e.printStackTrace();
      	  }
      	} finally {
      	  try {
      	    if (in != null) {
      	      in.close();
      	    }
      	  } catch (IOException ex) {
      	    // ignore close exception
      	  }
      	}


//    	return predicationDataSet;
    	return "null";
	}
}
